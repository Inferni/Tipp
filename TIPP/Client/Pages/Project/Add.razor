@page "/project/add"
@attribute [Authorize]
@inject IProjectDataService projectDataService
@inject IUserDataService userDataService 
@inject NavigationManager NavigationManager

<h1>Add Project</h1>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col">
            <label>First Name</label>
            <InputText @bind-Value="model.Name" class="form-control" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        @*<div class="form-group col">
            <label>Last Name</label>
            <InputText @bind-Value="model.LastName" class="form-control" />
            <ValidationMessage For="@(() => model.LastName)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label>Username</label>
            <InputText @bind-Value="model.Username" class="form-control" />
            <ValidationMessage For="@(() => model.Username)" />
        </div>
        <div class="form-group col">
            <label>Password</label>
            <InputText @bind-Value="model.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => model.Password)" />
        </div>*@
    </div>
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Save
        </button>
        <NavLink href="/admin/{UserService.User.Id}" class="btn btn-link">Cancel</NavLink>
    </div>
</EditForm>
@code {
    private AddProject model = new AddProject();
    private bool loading;

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            model.AdminId = userDataService.User.Id;
            await projectDataService.CreateProject(model);
            //await AccountService.Register(model);
            //AlertService.Success("User added successfully", keepAfterRouteChange: true);
            NavigationManager.NavigateTo($"admin/{userDataService.User.Id}");
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            //loading = false;
            //StateHasChanged();
        }
    }
}