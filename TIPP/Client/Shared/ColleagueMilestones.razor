@attribute [Authorize]
@inject IMilestoneDataService milestoneDataService;
@inject IUserDataService userDataService;
@inject IProjectDataService projectDataService; 
@inject IThumbsUpDataService thumbsUpDataService
@if (!loading)
{
    @foreach (var colleague in dtos)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@colleague.UserName</h5>
                <p class="card-text">@colleague.MilestoneName</p>
                <button class="btn btn-primary" @onclick="@(() => UpvoteColleague(colleague))"><Icon Name="IconName.ThumbsUp" /></button>
            </div>
        </div>
    }
}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}



@code {
    //Retreive milestone from project (projectid) that are not of the user (need userid) and are completed
    //For each milestone, get the name from it and find the approriate username, and the milestoneid
    //Create the cards out of the results

    private bool loading;
    private IList<ColleagueMilestoneDTO> dtos;
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        int userid = userDataService.User.Id;
        int projectid = projectDataService.Project.Id;
        dtos = await milestoneDataService.GetColleagueMilestonesByProjectID(userid, projectid);

        loading = false;

    }

    public class ColleagueCard
    {
        public string Name { get; }
        public string Milestone { get; }

        public ColleagueCard(string name)
        {
            Name = name;
        }

        public ColleagueCard(string name, string milestone)
        {
            Name = name;
            Milestone = milestone;
        }
    }

    public List<ColleagueCard> cards = new List<ColleagueCard>()
{
        new ColleagueCard("Jane Doe", "20x gevuld!"),
        new ColleagueCard("Jane Doe", "8 uur gevuld!"),
        new ColleagueCard("Richard Roe", "4x instructies geschreven!"),
        new ColleagueCard("Jane Doe", "20x gevuld!"),
    };

    private async void UpvoteColleague(ColleagueMilestoneDTO card)
    {
        ThumbsUpDTO thumbsUpDTO = new ThumbsUpDTO();
        thumbsUpDTO.MilestoneId = card.MilestoneId;
        thumbsUpDTO.UserId = userDataService.User.Id;

        await thumbsUpDataService.CreateThumbsUp(thumbsUpDTO);
        RemoveFromList(card);

        int userid = userDataService.User.Id;
        int projectid = projectDataService.Project.Id;
        dtos = await milestoneDataService.GetColleagueMilestonesByProjectID(userid, projectid);
        StateHasChanged();
    }

    private void RemoveFromList(ColleagueMilestoneDTO card)
    {
        dtos.Remove(card);
        Console.WriteLine(dtos.Count);
    }

    // Generate colleagues
    // Add to colleague list
    // Link to card
    // Loop card to display all colleagues

}
