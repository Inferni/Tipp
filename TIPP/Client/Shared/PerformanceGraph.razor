 @inject NavigationManager NavigationManager
@attribute [Authorize]
@inject Service.IUserDataService userService
@inject Service.IProjectDataService projectDataService
@inject Service.IMilestoneProgressionService milestoneProgressionService
@inject Service.IActivityDataService activityDataService

<div class="container">
    <div class="row">
        <div class="col">
            @*<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>*@

            <LineChart @ref="lineChart" TItem="double" OptionsObject="new { animation = new { duration = 0 }, hover = new { animationDuration = 0 }, responsiveAnimationDuration = 0 }" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary float-right" @onclick="ShowModal">Werk aan project</button>
        </div>

    </div>
</div>


@if (loading == false)
{


    @*<Button Clicked="@ShowModal">Show Modal</Button>*@

    <Modal @ref="modalRef">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Kies een activiteit</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                @if (activities != null)
                {
                    @foreach (var activity in activities)
                    {
                        <Field>
                            <Button Color="Color.Primary" @onclick="() => SetActivity(activity)">@activity.Name</Button>
                        </Field>
                    }
                }



            </ModalBody>
            <ModalFooter>
                @*<Button class="close" Color="Color.Secondary" Clicked="@HideModal" aria-label="Close"></Button>*@
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="modalFill">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Vul gewerkte tijd in</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
               @*FILLABLE FORM DING HIER*@
                <Field>
                    <TextEdit Placeholder="Gewerkte tijd in uren" type="number" TextChanged="@OnNameChanged"/>
                    <TextEdit Placeholder="Week?" type="number" TextChanged="@OnWeekChanged"/>
                    <Button Color="Color.Primary" Clicked="SendData">Ok</Button>
                </Field>


            </ModalBody>
            <ModalFooter>
                @*<Button class="close" Color="Color.Secondary" Clicked="@HideModal" aria-label="Close"></Button>*@
            </ModalFooter>
        </ModalContent>
    </Modal>

}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}

@code {

    //UREN OMZETTEN NAAR PERCENTAGE TENOPZICHTE VAN BASELINE IN DATABASE

    private bool loading;
    // reference to the modal component
    private Modal modalRef;

    private Modal modalFill;

    private void ShowModal()
    {
        modalRef.Show();
    }

    private void HideModal()
    {
        modalRef.Hide();
    }

    private void ShowFillableModal()
    {
        modalRef.Hide();
        modalFill.Show();

    }

    private void HideFillableModal()
    {
        modalFill.Hide();
    }

    //https://blazorise.com/docs/extensions/chart/

    LineChart<double> lineChart;


    private IList<TIPP.Shared.Activity> activities;
    private TIPP.Shared.Activity chosenActivity;
    private IList<MilestoneProgression> progressions;
    private IList<ColleagueProgressionsDTO> colleagueProgressions;
    private decimal workAmount;
    private int weekNumber;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        int projectid = projectDataService.Project.Id;
        activities = await activityDataService.GetActivitiesByProjectId(new ActivityDTO(projectid));

        await GetMilestoneProgression();
        await GetColleagueMilestoneProgression();
        await HandleRedraw();


        loading = false;

    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await HandleRedraw();
    //    }
    //}

    private async Task GetMilestoneProgression()
    {
        UserDTO dto = new UserDTO();
        dto.Id = userService.User.Id;
        dto.ProjectID = projectDataService.Project.Id;
        progressions = await milestoneProgressionService.GetProgressionWithUser(dto);
    }

    private async Task GetColleagueMilestoneProgression()
    {
        UserDTO dto = new UserDTO();
        dto.Id = userService.User.Id;
        dto.ProjectID = projectDataService.Project.Id;
        colleagueProgressions = await milestoneProgressionService.GetColleagueProgressionWithUser(dto);
    }

    void SetActivity(TIPP.Shared.Activity activity)
    {
        Console.WriteLine("Setting Activity");
        chosenActivity = activity;
        ShowFillableModal();
        HideModal();
        //SHOWFIELD FOR PROGRESSION
        Console.WriteLine(activity);
    }

    void OnNameChanged(string value)
    {
        workAmount = Convert.ToDecimal(value);
        Console.WriteLine(workAmount);
    }

    void OnWeekChanged(string value)
    {
        weekNumber = Convert.ToInt32(value);

    }

    private async void SendData()
    {
        HideFillableModal();
        int userid = userService.User.Id;
        MilestoneProgressionDTO dto = new MilestoneProgressionDTO();
        dto.Week = weekNumber;
        dto.Value = workAmount;
        Console.WriteLine(chosenActivity.Name);

        await milestoneProgressionService.UpdateMilestoneProgression(dto, userid, chosenActivity.Id);

        int projectid = projectDataService.Project.Id;
        activities = await activityDataService.GetActivitiesByProjectId(new ActivityDTO(projectid));
        await GetMilestoneProgression();
        await HandleRedraw();
        StateHasChanged();
    }

    //Loop through all colleagues
    //For each colleague, add a dataset
    // -Each colleague should have a dataset

    // Each colleauge should have a different colour
    // - Library with all colours, depending on how many colleagues there are

    //Each Colleague should be dashed
    // - FIGURE THIS OUT

    // Labels should be made depending how many weeks the project has been gone on for
    // Figure this out later

    public class User
    {
        public string Name { get; }
        public List<double> LineData { get; set; }

        public User(string name, List<double> lineData)
        {
            this.Name = name;
            this.LineData = lineData;
        }
    }

    public class Colleauge
    {
        public ColleagueMilestones.ColleagueCard Card { get; }
        public List<double> LineData { get; set; }

        public Colleauge(ColleagueMilestones.ColleagueCard card, List<double> lineData)
        {
            this.Card = card;
            this.LineData = lineData;
        }
    }

    //TODO Create list of colleagues and the current user (steal from other page?)
    User user = new User("John Doe", null);
    List<Colleauge> colleagues = new List<Colleauge>();
    //{
    //        new Colleauge(new ColleagueMilestones.ColleagueCard ("Baseline"), null),
    //        new Colleauge(new ColleagueMilestones.ColleagueCard ("Jane Doe"), null),
    //        new Colleauge(new ColleagueMilestones.ColleagueCard ("Richard Doe"), null),
    //    };

    //TODO Give all a dataset
    public void SetUserData()
    {

        // Each Linedata value corresponds to a week

        List<double> linedata = new List<double>();
        linedata.Add(0); //Start the list
        foreach (var progression in progressions)
        {
            if (linedata.Count() < progression.Week)
            {
                linedata.Add(0);
            }
            linedata[progression.Week - 1] += Convert.ToDouble(progression.Value);

        }

        user.LineData = linedata;

        //foreach (var colleague in colleagues)
        //{
        //    colleague.LineData = RandomizeData();
        //}
    }

    //TODO: LINEDATA BREAKS IF THERE IS NO DATA, USE TRY CATCH
    private void SetColleagueData()
    {
        foreach (var colleaugeProgressionDTO in colleagueProgressions)
        {
            List<double> linedata = new List<double>();
            linedata.Add(0); //Start the list
            foreach (var progression in colleaugeProgressionDTO.Progressions)
            {
                if (linedata.Count() < progression.Week)
                {
                    linedata.Add(0);
                }
                linedata[progression.Week - 1] += Convert.ToDouble(progression.Value);

            }
            Colleauge colleauge = new Colleauge(new ColleagueMilestones.ColleagueCard(colleaugeProgressionDTO.Colleague.Username), linedata);
            colleagues.Add(colleauge);
        }
    }

    //TODO loop through colleagues in HandleRedraw
    //TODO AddDataSet for each colleague

    async Task HandleRedraw()
    {
        SetUserData();
        SetColleagueData();

        await lineChart.Clear();
        await lineChart.AddLabels(Labels);

        //await lineChart.AddDataSet(GetLineChartDataset("Baseline", new List<double> { 0 }));
        await lineChart.AddDataSet(GetLineChartDataset(user.Name, user.LineData, false));

        foreach (var colleague in colleagues)
        {
            await lineChart.AddDataSet(GetLineChartDataset(colleague.Card.Name, colleague.LineData, true));
        }

    }

    LineChartDataset<double> GetLineChartDataset(string name, List<double> lineData, bool colleague)
    {
        if(!colleague)
        {
            return new LineChartDataset<double>
            {
                Label = userService.User.Username,
                Data = lineData,
                //BackgroundColor = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f) },
                BorderColor = new List<string> { ChartColor.FromRgba(20, 99, 255, 1f) }, //Color of the Line
                Fill = false,
                PointRadius = 5,
                BorderDash = new List<int> { }

            };
        }
        else
        {
            return new LineChartDataset<double>
            {
                Label = name,
                Data = lineData,
                //BackgroundColor = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f) },
                BorderColor = new List<string> { ChartColor.FromRgba(76, 0, 153, 0.5f) }, //Color of the Line
                Fill = false,
                PointRadius = 5,
                BorderDash = new List<int> { }

            };
        }
        //if (user)
        //{


        //}
        //else
        //{
        //    if (name == "Baseline")
        //    {
        //        return new LineChartDataset<double>
        //        {
        //            //Label = "Baseline",
        //            BackgroundColor = new List<string> { ChartColor.FromRgba(255, 255, 255, 0f) },

        //            Data = lineData,
        //            BorderColor = new List<string> { ChartColor.FromRgba(0, 204, 0, 0f) }, //Color of the Line
        //            Fill = false,
        //            PointRadius = 0,
        //            PointBorderColor = new List<string> { ChartColor.FromRgba(102, 204, 0, 0f) }, //Color of the Line,
        //            BorderDash = new List<int> { 5, 2 }
        //        };
        //    }


        //}
        //return new LineChartDataset<double>
        //{
        //    Label = name,
        //    Data = lineData,
        //    //BackgroundColor = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f) },
        //    BorderColor = new List<string> { ChartColor.FromRgba(153, 204, 255, 1f) }, //Color of the Line
        //    Fill = false,
        //    PointRadius = 2,
        //    BorderDash = new List<int> { 5, 5 }
        //};
    }



    string[] Labels = { "Week 1", "Week 2", "Week 3", "Week 4", "Week 5", "Week 6" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    Random r = new Random(DateTime.Now.Millisecond);
    List<double> RandomizeData()
    {


        return new List<double> { r.Next(4, 10), r.Next(4, 10), r.Next(4, 10), r.Next(4, 10), r.Next(4, 10), r.Next(4, 10) };
    }
}
