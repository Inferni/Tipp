@page "/admin/{Id}"
@attribute [Authorize]
@inject Service.IUserDataService userService
@inject Service.IProjectDataService projectService 
@using TIPP.Shared
@using Blazorise.DataGrid
<h1>Users</h1>
<NavLink href="project/add" class="btn btn-sm btn-success mb-2">Add Project</NavLink>
<table class="table table-striped">
    <thead>
        <tr>
            <th style="width: 30%">First Name</th>
            <th style="width: 10%"></th>
        </tr>
    </thead>
    <tbody>
        @if (projects != null)
        {
            foreach (var project in projects)
            {
                <tr>
                    <td>@project.Name</td>
                    <td style="white-space: nowrap">
                        <NavLink href="@($"project/edit/{project.Id}")" class="btn btn-sm btn-primary mr-1">Edit</NavLink>
                        <NavLink href="@($"project/delete/{project.Id}")" class ="btn-danger mr-1 btn btn-sm">Delete</NavLink>
                        @*<button @onclick="@(() => DeleteUser(user.Id))" disabled="@user.IsDeleting" class="btn btn-sm btn-danger btn-delete-user">
                            @if (user.IsDeleting)
                            {
                                <span class="spinner-border spinner-border-sm"></span>
                            }
                            else
                            {
                                <span>Delete</span>
                            }
                        </button>*@
                    </td>
                </tr>
            }
        }
        @if (loading)
        {
            <tr>
                <td colspan="4" class="text-center">
                    <span class="spinner-border spinner-border-lg align-center"></span>
                </td>
            </tr>
        }
    </tbody>
</table>



@code {
    [Parameter]
    public string Id { get; set; }

    IList<Project> projects;

    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        UserDTO dto = new UserDTO(userService.User.Id);
        projects = await projectService.GetAllProjectsByUserId(dto);
        foreach (var project in projects)
        {
            Console.WriteLine(project.Id);
        }
        //users = await userService.GetAllUsersByProjectId()
        loading = false;
    }

    //private async void DeleteUser(int id)
    //{
    //    var user = users.First(x => x.Id == id);
    //    user.IsDeleting = true;
    //    await AccountService.Delete(id);
    //    users.Remove(user);
    //    StateHasChanged();
    //}


}
